
# Aux workflow
* Aux is: XF.Base.Transform.SDA3ToFHIR
	*   Pass in: 
		* Source Class - Not always obvious, check base SDA class for type. 
		* Dictionary Class Name
	* Runs ##class(XF.Base.Transform.SDA3ToFHIR ).GetDTL()
				* Checks for ``"HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.Coding"`` 
					* calls ``##class(XF.Base.Transform.HL7ToFHIRTerminologyDTL).GetDTL(source, "")
				* Or ``"HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.CodeableConcept"
					* `##class(XF.Base.Transform.HL7ToFHIRCodeableConceptDTL).GetDTL(source, "")`
				* If it is neither, it calls `##super` . Goes to `HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR`
					* Checks for Custom DTLs by running `##class(HS.FHIR.DTL.Util.API.ExecDefinition).GetCustomDTLPackage()`, Since we always use custom DTLS, this is always true. 
					* Since we're using a custom DTL, it runs `##class(HS.FHIR.DTL.Util.API.ExecDefinition).GetDTLPackageAndClass(DTL)` where DTL is the Dictionary Class Name
						* This tells us what DTL we're using. 
					* Does other things, but the previous step always works in our environment. 

# Patient.Marital Status
## SDA: 
/Container/Patient/MaritalStatus/
## FHIR:
Patient.maritalStatus
## Value: 
```
<MaritalStatus>
<Code>M</Code>
</MaritalStatus>
```

If MaritalStatus is present -

* Does initial setups, where it provides coding.system, target.value. If it's null, it'll put in UNK and null-flavor

LocalDTL:
ClassName
	HS.SDA3.CodeTableDetail.MaritalStatus
Dictionary
	HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.Extension

Dictionary type is NOT HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.Coding or HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.CodeableConcept

Goes to ``##Super  
Does DTL Lookup. Result: HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.Extension.
Calls HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.Extension.
	Within the HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.Extension:
	Gets DTL
	ClassName = HS.SDA3.CodeTableTranslated
	Dictionary = HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.CodeableConcept
		This is one of the special ones, it attempts to set the DTL  to a custom one:

``W ##class(XF.Base.Transform.HL7ToFHIRCodeableConceptDTL).GetDTL("HS.SDA3.CodeTableTranslated", "")

Nothing returned because the source is HS.SDA3.CodeTableTranslated object  but doesn't extend it (I think) and it doesn't exist in the ^HS.XF.LookupTable, so uses the className, which is ``"HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.CodeableConcept"`` Check to see if it is a CodeTableTranslated object in the first place, not just extending? This way it'll use the custom CodeTableTranslated.

Therefore, it calls super again and ends up at [[XF.Base.Transform.SDA3.vR4.CodeTableTranslated.CodeableConcept]]


# Patient.Contact.Relationship
## SDA: 
Patient/SupportContacts/SupportContact/ContactType
## FHIR: 
Patient.Contact.Relationship.Coding
## Value: 
```
<ContactType>
<Code>E</Code>
</ContactType>
```
Looks in local DTL: GetDTL(source.SupportContacts.(st), HS.FHIR.DTL.SDA3.vR4.SupportContact.Patient.contact"

Not part of the Dictionary types its looking for. Goes to super which looks in the HS.XF.Transform global. SupportContact is HS.SDA3.SupportContact.

Dictionary is HS.FHIR.DTL.SDA3.vR4.SupportContact.Patient.contact.

Via Super, DTL is  XF.Base.Transform.SDA3.vR4.SupportContact.Patient.contact.

Contact.Relationship.Coding

If ContactType is defined

Does a lookup at ^HS.XF.LookupTable

"SDA3","vR4","HS.SDA3.CodeTableDetail.ContactType","patient-contactrelationship",source.ContactType

In this case it's E, which translates to E.

Sets Code to "E".

Sets coding.system to "[http://terminology…..](http://terminology…..)" etc.

Never sets the value of Text.

# <span style= color:green>Patient.Communications (is working) </span>

## SDA: 
Container/Patient/PrimaryLanguage/Code
## FHIR: 
Patient.communication.text
## Value
```
<PrimaryLanguage>
	<Code>ENG</Code>
</PrimaryLanguage>
```
Start in Patient.DTL If Language is blank, populate with U, UNK, and set Communication.Preferred to False.
Calls ExecuteStandardClass.
If PrimaryLanugage is defined in HS.FHIR.DTL.SDA3.vR4.PatientLanguage.Patient.communication

Go down to condition: ```
```

<if condition='##class(HS.FHIR.DTL.Util.Element.Object).Defined(source, "PreferredLanguage")>
```

If PreferredLanguage is defined.

Get the DTL:

``GetDTL("HS.SDA3.CodeTableDetail.Language", "HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.CodeableConcept")

Since the CodeableConcept is part of the checks, goes to

``set dtl = ##class(XF.Base.Transform.HL7ToFHIRCodeableConceptDTL).GetDTL("HS.SDA3.CodeTableDetail.Language", "")

HS.SDA3.CodeTableDetail.Language extends HS.SDA3.CodeTableTranslated

And is present in ``^HS.XF.LookupTable("SDA3", "vR4", HS.SDA3.CodeTableDetail.Language, "fhir").

Returns the HL7ToFHIRCodeableConcept transform class as the "DTL".

Call Transform.

Using [[HL7ToFHIRCodeableConceptDTL.cls]] which DOES populate TEXT.


# Organization.Type  

## Gurarantor Organization
Using Guarantor Organization: Guarantor Organization. 
 also has type: Insurance Group Employer, Insurance Company - Insurance Group Employer
#todo  Find more organization examples?

## SDA: 
/Container/Encounters/Encounter/Guarantors/Guarantor/GuarantorType

## FHIR: 
Organization.type (where type = Guarantor Organization). 
## Value: 
In SDA: ``<GuarantorType>O</GuarantorType>
In FHIR: 
```
"type":[
          {
            "coding":[
              {
                "code":"gu",
                "display":"Guarantor Organization",
                "system":"http://InterSystems/FTS/u2ll48shjkk5/organizationtype"
              }
            ]
          }
        ],
```
- Start in   \\src\\cls\\XF\\Base\\Transform\\SDA3\\vR4\\Guarantor\\Extension.cls
- If GurarantorType exists
	-Does a ..lookup on ("CodingSystem","OrganizationType","Undefined")
		Looks in ^Ens.LookupTable
		Sets value in SDACodingStandard *in SDA*
	-Sets value of "gu" in Type.Code *in SDA*
	-Sets value of "Guarantor Organization" in Type.Description *in SDA*
* Calls ExecuteStandardClass on Guarantor.Extension #question
	* From here, it does a GetDTL on "HS.FHIR.DTL.SDA3.vR4.Guarantor.RelatedPerson". ` w ##class(HS.FHIR.DTL.Util.API.ExecDefinition).GetDTLPackageAndClass("HS.FHIR.DTL.SDA3.vR4.Guarantor.RelatedPerson")`
	* DTL is XF.Base.Transform.SDA3.vR4.Guarantor.RelatedPerson
		* If GuarantorType exists;
			* Sets coding.code as source.GuarantorType
			* Sets coding.system as "http://terminology..."
		* **Never sets text, doesn't even consider it as a Codeable Concept** 
# Organization.Type -
## Insurance Company
## SDA: 
/Container/Encounters/Encounter/HealthFunds/HealthFund/HealthFund
## FHIR: 

## Value: 
### SDA: 
	<HealthFund>
	<Code>3.1done</Code>
	<Description>Emblem Health</Description>

### FHIR: 
	"type":[
          {
            "coding":[
              {
                "code":"ins",
                "display":"Insurance Company",
                "system":"http://InterSystems/FTS/u2ll48shjkk5/organizationtype"
              }
            ]
          }

Starting in \\src\\cls\\XF\\Base\\Transform\\SDA3\\vR4\\HealthFund\\Coverage.cls
Does not call ExecuteStandardClass. 
If Healthfund exists, calls GetDTL. Isn't a "special" dictionary class. Calls super getDTL.  `w ##class(HS.FHIR.DTL.Util.API.ExecDefinition).GetDTLPackageAndClass("HS.FHIR.DTL.SDA3.vR4.CodeTableDetail.HealthFund.Organization")`
DTL is: XF.Base.Transform.SDA3.vR4.CodeTableDetail.HealthFund.Organization
	If there's a description, sets that as target.name. 
	Target.identifier gets source.Code. 
	
Back in coverage.cls
	then calls a second DTL: `GetDTL(source.Extension.IN1EmpInsHolder, "HS.FHIR.DTL.SDA3.vR4.CodeTableDetail.Organization.Organization")`
		`w ##class(HS.FHIR.DTL.Util.API.ExecDefinition).GetDTLPackageAndClass("HS.FHIR.DTL.SDA3.vR4.CodeTableDetail.Organization.Organization")`
		DTL Is: XF.Base.Transform.SDA3.vR4.CodeTableDetail.Organization.Organization
		Looks for "Type" in the source. Type doesn't exist. If it did, it'd go to our codeableConcept, and potentially get the text field, but it doesn't have it so it won't.
		it comes back out to coverage
			directly adds coding.code as "ins"
			coding.display = "Insurance Company"
			org.type = tmp.type (which is retrieved via the organization.organization DTL from above, but since it's not populated, it leaves it blank. 
Not sure what a solution to this would be. We manually add ins and Insurance company, there's nothing from the SDA to add as it is written. 
#question  this is probably going to need someone more experienced than me to look at. 
# Organization.Purpose
Seems to be a support contact thing.
## SDA: 
/Container/Patient/SupportContacts/SupportContact/Extension
## FHIR: 
resourse.resourcetype\[Organization].purpose
## Value
### SDA:
```
<Extension>
	<ContactReasonIdentifier>HR</ContactReasonIdentifier>
	<ContactReasonText>Human Resource</ContactReasonText>
	<ContactNameEffectiveDate>2022-01-01T00:00:00</ContactNameEffectiveDate>
	<ContactNameExpirationDate>2022-12-30T00:00:00</ContactNameExpirationDate>
</Extension>
```
### FHIR
```
"purpose":{
  "coding":[
	{
	  "code":"HR",
	  "display":"Human Resource",
	  "system":"http://terminology.hl7.org/CodeSystem/contactentity-type"
	}
  ]
},
```

Starts in \\src\\cls\\XF\\Base\\Transform\\SDA3\\vR4\\SupportContact\\Patient\\contact.cls
If there's an extension:
	Simple creates a new CodeableConcept and assigns values.
	target.Code = ContactReasonIdentifier
	target.display = contactReasonText
	adds the coding to purposse.coding, and adds purpose to the contact. 
**This one will be very easy to add

# Encounter.Type (is working)
## SDA: 
/Container/Encounters/Encounter/AdmissionType
## FHIR: 
resource\[resource.type = "encounter"].type
## Value:
### SDA: 
```
<AdmissionType>
<Code>E</Code>
</AdmissionType>

```
### FHIR:
```
"type":[
          {
            "coding":[
              {
                "code":"E",
                "display":"Emergency",
                "system":"http://terminology.hl7.org/CodeSystem/v2-0007"
              }
            ]
          }
        ],
```
Starting in Encounter. 
`src\cls\XF\Base\Transform\SDA3\vR4\Encounter\Encounter.cls
Executes Standard Class. 
#todo finish this one. 


Custom work, after ExecuteStandardClass 
If AdmissionType is not  found:
1) Value gets the value from `##class(HS.FHIR.DTL.Util.Lookup).Code("SDA3","vR4","HS.SDA3.Encounter:AdmissionType","v2-0007",source.AdmissionType)`
	1) gets value from ^HS.XF.LookupTable("SDA3","vR4","HS.SDA3.Encounter:AdmissionType","v2-0007",AdmissionType/Code)
2) code.code = first piece of ^ separated value
3) code.display = second piece of value


# Condition.Code
## SDA: 
/Container/Diagnoses/Diagnosis[1]/Diagnosis
## FHIR: 
Resource.Condition.Code
## Values: 
### SDA: 
```
<Diagnosis>
	<Diagnosis>
		<Code>side pain</Code>
		<Description>side pain</Description>
		<SDACodingStandard>OBHSKJMC-DXG-LOCAL</SDACodingStandard>
	</Diagnosis>
</Diagnosis>

```
### FHIR: 
```
"code":{
          "coding":[
            {
              "code":"side pain",
              "display":"side pain",
              "system":"http://InterSystems/FTS/u2ll48shjkk5/condition"
            }
          ]
        },
```

Starting in Diagnosis\\Condition
If "Diagnosis" is defined:
- create a new codeable concept named tmp. 
- Call GetDTL on source.Diagnosis = "HS.SDA3.CodeTableDetail.Diagnosis", "HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.CodeableConcept"
	- Dictionary is a codeable concept. Call HL7ToFHIR DTL. 
		- CodeTableDetail.Diagnosis extends HS.SDA3.CodeTableTranslated. 
		- ^HS.XF.LookupTable("SDA3", "vR4", source.%ClassName(1), "fhir")  doesnt' exist. So it doesn't do custom translation. Quits with '"".
	-  Since it failed local check, calls Super. 
		- `w ##class(HS.FHIR.DTL.Util.API.ExecDefinition).GetDTLPackageAndClass("HS.FHIR.DTL.SDA3.vR4.CodeTableTranslated.CodeableConcept")`
		- DTL is [[XF.Base.Transform.SDA3.vR4.CodeTableTranslated.CodeableConcept]] which only outputs text if OrignialText is populated. 

# Encounter.ReasonCode

# Condition.Category (Already working)
## SDA: 
N/A Hardcoded. 
## FHIR: 
resource.condition.category
## Values:
### SDA:
n/a
### FHIR: 
```
"category":[
          {
            "coding":[
              {
                "code":"encounter-diagnosis",
                "display":"Encounter Diagnosis",
                "system":"http://terminology.hl7.org/CodeSystem/condition-category"
              }
            ],
            "text":"Encounter Diagnosis"
          }
```
This is working, but is directly hardcoded in the DTL: src\\cls\\XF\\Base\\Transform\\SDA3\\vR4\\Diagnosis\\Condition.cls

# Condition.Severity
## SDA
## FHIR
Condition.severity
## Values
### SDA
### FHIR

I'm not sure we're even outputting this, theres no place for it in the SDA. 
I'm actually not even sure this is in HL7V2.5: https://hl7-definition.caristix.com/v2/HL7v2.5/Segments/DG1
From meeting with Heather: From Hl7 codition-mappings.html Pulls from PRB segments (PRB-26 or ABS-3)
